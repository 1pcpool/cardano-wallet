require "rspec/core/rake_task"
require "cardano_wallet"
require_relative "env"
require_relative "helpers/utils"

include Helpers::Utils

RSpec::Core::RakeTask.new(:spec)

STATE = absolute_path ENV['TESTS_E2E_STATEDIR']
CONFIGS = absolute_path ENV['CARDANO_NODE_CONFIGS']
LOGS = absolute_path ENV['TESTS_LOGDIR']
NODE_DB = absolute_path ENV['TESTS_NODE_DB']
WALLET_DB = absolute_path ENV['TESTS_WALLET_DB']

BINS = absolute_path ENV['TESTS_E2E_BINDIR']

FIXTURES_FILE = absolute_path ENV['TESTS_E2E_FIXTURES_FILE']
FIXTURES_SECRET = absolute_path ENV['TESTS_E2E_FIXTURES']

TOKEN_METADATA = ENV['TESTS_E2E_TOKEN_METADATA']

task :default => :spec

task :fixture_wallets_encode do
  desc "Encode fixture wallets from #{FIXTURES_FILE} using $TESTS_E2E_FIXTURES phrase"
  puts "\n  >> Encoding #{FIXTURES_FILE}..."

  puts `gpg --pinentry-mode loopback --passphrase=#{FIXTURES_SECRET} --symmetric --output=#{FIXTURES_FILE}.gpg #{FIXTURES_FILE}`
end

task :fixture_wallets_decode do
  desc "Decode fixture wallets from #{FIXTURES_FILE}.gpg using $TESTS_E2E_FIXTURES phrase"
  encoded_file = "#{FIXTURES_FILE}.gpg"
  decoded_file = FIXTURES_FILE
  if File.exists?(decoded_file)
    puts "\n  >> Skipping decoding #{encoded_file}... #{decoded_file} already exists!"
  else
    puts "\n  >> Decoding #{FIXTURES_FILE}.gpg..."
    puts `gpg --pinentry-mode loopback --yes --passphrase=#{FIXTURES_SECRET} --output #{decoded_file} --decrypt #{encoded_file}`
  end
end

task :fixture_wallets_template do
  puts "\n  >> Creating #{FIXTURES_FILE}"

  fixture_wallets = { :linux => {:shelley => mnemonic_sentence(24),
                                 :icarus => mnemonic_sentence(15),
                                 :byron => mnemonic_sentence(12) },
                      :macos => {:shelley => mnemonic_sentence(24),
                                 :icarus => mnemonic_sentence(15),
                                 :byron => mnemonic_sentence(12) },
                      :windows => {:shelley => mnemonic_sentence(24),
                                   :icarus => mnemonic_sentence(15),
                                   :byron => mnemonic_sentence(12) }
                    }
  if File.exists?(FIXTURES_FILE)
    err = %Q{
              File #{FIXTURES_FILE} already exists!
              I don't want to overwrite it in case it
              contains fixture wallets already...
            }
    STDERR.puts err
  else
    File.open(FIXTURES_FILE, 'w') {|f| f.write JSON.pretty_generate(fixture_wallets) }
  end

end

task :clean_logs do
  puts "\n  >> Removing logs"
  rm_files(LOGS)
end

task :clean_bins do
  puts "\n  >> Removing bins"
  rm_files(BINS)
end

task :wait_until_node_synced do
  puts "\n  >> Waiting for node to be synced"

  network = CardanoWallet.new.misc.network
  timeout = 180
  current_time = Time.now
  timeout_treshold = current_time + timeout
  puts "Timeout: #{timeout}s"
  puts "Threshold: #{timeout_treshold}"
  begin
    current_time = Time.now
    while network.information["sync_progress"]["status"] == "syncing" do
      puts "Syncing... #{network.information["sync_progress"]["progress"]["quantity"]}%"
      sleep 15
    end
  rescue
    retry if (current_time <= timeout_treshold)
    raise("Could not connect to wallet within #{timeout} seconds...")
  end

  puts "\n>> Cardano-node and cardano-wallet are synced! <<"
end

##
# `rake start_node_and_wallet[testnet,local]' assumes cardano-node and cardano-wallet on $PATH
# `rake start_node_and_wallet[testnet]' assumes cardano-node and cardano-wallet in $TESTS_E2E_BINDIR
task :start_node_and_wallet, [:env, :installation] do |task, args|
  puts "\n  >> Setting up cardano-node and cardano-wallet"

  installation = args[:installation] || :bins
  config_dir = File.join(CONFIGS, args[:env])
  cd = Dir.pwd
  mk_dir(STATE)
  mk_dir(LOGS)

  if is_win?
    # create cardano-node.bat file
    node_cmd = "#{cd}/cardano-node.exe run --config #{config_dir}/configuration.json --topology #{config_dir}/topology.json --database-path #{NODE_DB} --socket-path \\\\.\\pipe\\cardano-node-testnet"
    File.open("cardano-node.bat", "w") do |f|
      f.write(node_cmd)
    end

    # create cardano-wallet.bat file
    wallet_cmd = "#{cd}/cardano-wallet.exe serve --node-socket \\\\.\\pipe\\cardano-node-testnet --testnet #{config_dir}/genesis-byron.json --database #{WALLET_DB} --token-metadata-server #{TOKEN_METADATA}"
    File.open("cardano-wallet.bat", "w") do |f|
      f.write(wallet_cmd)
    end

    install_node = "nssm install cardano-node #{cd}/cardano-node.bat"
    install_wallet = "nssm install cardano-wallet #{cd}/cardano-wallet.bat"
    log_stdout_node = "nssm set cardano-node AppStdout #{LOGS}/node.log"
    log_stderr_node = "nssm set cardano-node AppStderr #{LOGS}/node.log"
    log_stdout_wallet = "nssm set cardano-wallet AppStdout #{LOGS}/wallet.log"
    log_stderr_wallet = "nssm set cardano-wallet AppStderr #{LOGS}/wallet.log"
    start_node = "nssm start cardano-node"
    start_wallet = "nssm start cardano-wallet"

    puts install_node
    puts install_wallet
    puts log_stdout_node
    puts log_stderr_node
    puts log_stdout_wallet
    puts log_stderr_wallet
    puts start_node
    puts start_wallet

    puts `#{install_node}`
    puts `#{install_wallet}`
    puts `#{log_stdout_node}`
    puts `#{log_stderr_node}`
    puts `#{log_stdout_wallet}`
    puts `#{log_stderr_wallet}`
    puts `#{start_node}`
    puts `#{start_wallet}`
  else
    bin_dir = installation == "local" ? "" : BINS + "/"
    start_node = "#{bin_dir}cardano-node run --config #{config_dir}/configuration.json --topology #{config_dir}/topology.json --database-path #{NODE_DB} --socket-path #{STATE}/node.socket"
    start_wallet = "#{bin_dir}cardano-wallet serve --node-socket #{STATE}/node.socket --testnet #{config_dir}/genesis-byron.json --database #{WALLET_DB} --token-metadata-server #{TOKEN_METADATA}"

    puts start_node
    puts start_wallet

    puts `screen -dmS NODE -L -Logfile #{LOGS}/node.log #{start_node}`
    puts `screen -dmS WALLET -L -Logfile #{LOGS}/wallet.log #{start_wallet}`
    puts `screen -ls`
  end
end

task :stop_node_and_wallet do
  puts "\n  >> Stopping cardano-node and cardano-wallet"

  if is_win?
    puts `nssm stop cardano-wallet`
    puts `nssm stop cardano-node`

    puts `nssm remove cardano-wallet confirm`
    puts `nssm remove cardano-node confirm`
  else
    puts `screen -XS WALLET quit`
    puts `screen -XS NODE quit`
  end

end

task :get_latest_bins do
  puts "\n  >> Getting latest node and wallet binaries from Hydra into #{BINS}"

  wget(get_latest_binary_url)
  mk_dir(BINS)
  if is_win?
    puts `unzip binary-dist`
    puts `dir`

    puts "cardano-node version:"
    puts `cardano-node.exe version`

    puts "cardano-wallet version:"
    puts `cardano-wallet.exe version`
  else
    Rake::Task[:clean_bins].invoke
    puts `rm -rf cardano-wallet-*/`
    puts `tar -xvf binary-dist`
    puts `cp -r cardano-wallet-*/* #{BINS}`

    puts "cardano-node version:"
    puts `#{BINS}/cardano-node version`

    puts "cardano-wallet version:"
    puts `#{BINS}/cardano-wallet version`
  end
end

task :get_latest_configs, [:env] do |task, args|
  env = args[:env]
  out = File.join(CONFIGS, env)

  if (File.exist?(out) and not File.writable?(out))
    # The config directory is probably a /nix/store path
    puts "\n  >> Using config directory '#{out}'"
  else
    puts "\n  >> Getting latest configs for '#{env}' into #{CONFIGS}"

    base_url = get_latest_configs_base_url
    mk_dir(STATE)
    mk_dir(CONFIGS)
    mk_dir(out)
    config_file = File.join(out, "configuration.json")
    wget("#{base_url}/#{env}-config.json", config_file)
    wget("#{base_url}/#{env}-byron-genesis.json", "#{out}/genesis-byron.json")
    wget("#{base_url}/#{env}-shelley-genesis.json", "#{out}/genesis-shelley.json")
    wget("#{base_url}/#{env}-topology.json", "#{out}/topology.json")
    # remove environment names from genesis files
    config = File.read(config_file)
    config_edited = config.gsub(/#{env}-([^-]+)-genesis.json/, 'genesis-\1.json')
    File.open(config_file, "w") {|file| file.puts config_edited }
  end
end

task :run_on, [:env, :installation, :sync_strategy] do |task, args|
  puts "\n>> Setting up env and running tests..."
  puts "TESTS_E2E_STATEDIR=#{STATE}"
  env = args[:env]
  installation = args[:installation] || :bins
  sync_strategy = args[:sync_strategy] || :sync

  if installation == "local"
    puts "\n  >> Skipping getting latest binaries. Will test wallet and node from $PATH."
  else
    Rake::Task[:get_latest_bins].invoke
  end

  Rake::Task[:fixture_wallets_decode].invoke
  Rake::Task[:get_latest_configs].invoke(env)
  Rake::Task[:start_node_and_wallet].invoke(env, installation)

  if sync_strategy == "no-sync"
    puts "\n  >> Skipping waiting for node to be synced..."
  else
    Rake::Task[:wait_until_node_synced].invoke
  end

  Rake::Task[:spec].invoke
  Rake::Task[:stop_node_and_wallet].invoke
end
